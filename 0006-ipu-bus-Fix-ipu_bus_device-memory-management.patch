From 817da06bcaf6f41a26c85e44002be49260eb1f39 Mon Sep 17 00:00:00 2001
From: Hans de Goede <hdegoede@redhat.com>
Date: Fri, 21 Oct 2022 23:22:24 +0200
Subject: [PATCH 6/6] ipu-bus: Fix ipu_bus_device memory management

struct device objects are refcounted and tying their lifetime to that of
the parent pci-device is wrong. Even if the driver gets unbound there
could still be some references to the struct device.

Replace the devm_kzalloc() with a regular kzalloc() and make the release
callback free the memory with kfree(), so that the lifetime of the struct
device is properly managed by the refcount insted of being tied to the
parent pci-device.

Signed-off-by: Hans de Goede <hdegoede@redhat.com>
---
 drivers/media/pci/intel/ipu-bus.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/intel/ipu-bus.c b/drivers/media/pci/intel/ipu-bus.c
index 96792e15e..bdade697d 100644
--- a/drivers/media/pci/intel/ipu-bus.c
+++ b/drivers/media/pci/intel/ipu-bus.c
@@ -149,6 +149,9 @@ static struct mutex ipu_bus_mutex;
 
 static void ipu_bus_release(struct device *dev)
 {
+	struct ipu_bus_device *adev = to_ipu_bus_device(dev);
+
+	kfree(adev);
 }
 
 struct ipu_bus_device *ipu_bus_initialize_device(struct pci_dev *pdev,
@@ -159,7 +162,7 @@ struct ipu_bus_device *ipu_bus_initialize_device(struct pci_dev *pdev,
 	struct ipu_bus_device *adev;
 	struct ipu_device *isp = pci_get_drvdata(pdev);
 
-	adev = devm_kzalloc(&pdev->dev, sizeof(*adev), GFP_KERNEL);
+	adev = kzalloc(sizeof(*adev), GFP_KERNEL);
 	if (!adev)
 		return ERR_PTR(-ENOMEM);
 
-- 
2.37.3

